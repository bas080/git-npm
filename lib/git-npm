#!/usr/bin/env bashionista

set -e;
BRANCH="$(git rev-parse --abbrev-ref HEAD)";
function _publish_synopsis ()
{
    echo -n '[<branch>]'
};
function _publish_description ()
{
    echo 'Publish specific branch to the NPM repository.'
};
function create_tmp_repository ()
{
    local path="$PWD";
    local tmp;
    {
        tmp="$(mktemp -d)";
        cd "$tmp";
        git init;
        git remote add origin "$path/.git";
        git fetch origin;
        git checkout "${1:-$BRANCH}"
    } 1>&2;
    echo "$tmp"
};
function git-npm_publish ()
{
    cd "$(create_tmp_repository "$@")";
    {
        npm i;
        npm audit;
        npm t;
        [[ -z "$(git status -s)" ]] || {
            log "aborting publish: contains uncommited files."
        };
        npm publish
    }
};
function _tags_synopsis ()
{
    echo -n '[<branch>]'
};
function _tags_description ()
{
    echo 'Create remote tags for (current) branch.'
};
function git-npm_tags ()
{
    git tag --list 'v*' | xargs -r git tag -d;
    local version;
    git rev-list --reverse "${1:-$BRANCH}" | while read -r commit; do
        {
            git show "$commit:package.json" | jq -e .version &> /dev/null || continue;
            version="v$(git show "$commit:package.json" | jq -er .version)";
            echo -n "version $version: commit: $commit: ";
            git tag "$version" "$commit" || continue;
            echo "created: tag '$version' (was ${commit:0:6})"
        } 1>&2 || continue;
        echo "$version";
    done | xargs -r git push origin -f
};
function _run_synopsis ()
{
    echo -n '<command> [...args]'
};
function _run_description ()
{
    echo 'Run a command in a clean version of the current branch.'
};
function git-npm_run ()
{
    cd "$(create_tmp_repository)";
    npm install;
    eval "npm run" "$@"
};
function log ()
{
    echo "[git-npm] $1" 1>&2
}
